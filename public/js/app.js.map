{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/lines.js","js/services/tfl.js","js/models/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","facebook","clientId","twitter","consumer_key","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","ConfirmationController","$http","method","params","confirmationCode","LoginController","login","credentials","authenticate","provider","LinesIndexController","TFL","linesIndex","all","getStatuses","lines","LinesFavIndexController","User","linesFavIndex","lineFavs","get","id","getPayload","_id","LinesShowController","getTweets","q","tflId","res","err","console","log","linesShow","tweets","data","statuses","line","filter","$resource","update","UsersIndexController","usersIndex","query","UsersShowController","usersShow","isLoggedIn","isAuthenticated","UsersEditController","usersEdit","$update","UserLinesController","$scope","isFav","userLines","includes","toggle","idx","findIndex","splice","push","angular","module","config","$inject","service","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('twitterForLondon', ['ngResource', 'ui.router', 'satellizer', 'ngSanitize'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider,   $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as user'\n  })\n  .state('linesIndex', {\n    url: '/lines',\n    templateUrl: '/templates/linesIndex.html',\n    controller: 'LinesIndexController as linesIndex'\n  })\n  .state('linesFavIndex', {\n    url: '/linesFav',\n    templateUrl: '/templates/linesFavIndex.html',\n    controller: 'LinesFavIndexController as linesFavIndex'\n  })\n  .state('linesShow', {\n    url: '/lines/:tflId',\n    templateUrl: '/templates/linesShow.html',\n    controller: 'LinesShowController as linesShow'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('usersEdit', {\n    url: '/user/:id',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as edit'\n  })\n  .state('userLines', {\n    url: '/user/:id/lines',\n    templateUrl: '/templates/userLines.html',\n    controller: 'UserLinesController as userLines'\n  })\n  .state('confirm', {\n    url: '/confirm/:confirmationCode',\n    templateUrl: '/templates/confirm.html',\n    controller: 'ConfirmController as confirm'\n  });\n\n  $urlRouterProvider.otherwise('/lines');\n}\n\nAuth.$inject = ['$authProvider'];\n\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.facebook({\n    clientId: '360279380977935'\n  });\n\n  $authProvider.twitter({\n    consumer_key: 'rG5fJ6jrp0NECDqpceKMo5UuZ'\n  });\n  //\n  // $authProvider.instagram({\n  //   clientId: 'Instagram Client ID'\n  // });\n\n}\n","angular.module('twitterForLondon')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController)\n  .controller('ConfirmController', ConfirmationController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nConfirmationController.$inject = ['$http', '$state'];\nfunction ConfirmationController($http, $state) {\n  $http({\n    method: 'POST',\n    url: `/confirm/${$state.params.confirmationCode}`\n  }).then(() => {\n    $state.go('login');\n  });\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('linesIndex');\n    });\n  }\n\n  function authenticate (provider) {\n    $auth.authenticate(provider)\n      .then(() => {\n        $state.go('linesIndex');\n      });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular\n  .module('twitterForLondon')\n  .controller('LinesIndexController', LinesIndexController)\n  .controller('LinesFavIndexController', LinesFavIndexController)\n  .controller('LinesShowController', LinesShowController);\n\n\nLinesIndexController.$inject = ['TFL'];\nfunction LinesIndexController(TFL) {\n  const linesIndex = this;\n  linesIndex.all = [];\n\n  TFL.getStatuses()\n    .then((lines) => {\n      linesIndex.all = lines;\n    });\n}\n\nLinesFavIndexController.$inject = ['TFL', '$auth', 'User'];\nfunction LinesFavIndexController(TFL, $auth, User) {\n  const linesFavIndex = this;\n  linesFavIndex.lineFavs = [];\n  linesFavIndex.user = User.get({id: $auth.getPayload()._id});\n\n  TFL.getStatuses()\n    .then((lines) => {\n      linesFavIndex.lineFavs = lines;\n    });\n}\n\nLinesShowController.$inject = ['TFL', '$http', '$state'];\nfunction LinesShowController(TFL, $http, $state) {\n  const linesShow = this;\n  linesShow.tweets = [];\n\n  TFL.getStatuses()\n    .then((lines) => {\n      linesShow.line = lines.filter((line) => {\n        return line.tflId === $state.params.tflId;\n      })[0];\n    });\n\n  function getTweets() {\n    $http({\n      method: 'GET',\n      url: '/tweets',\n      params: { q: $state.params.tflId }\n    }).then((res, err) => {\n      if(err) {\n        console.log('Something went wrong, run away from ', err );\n        return;\n      }\n      linesShow.tweets = res.data.statuses;\n      console.log(linesShow.tweets);\n    });\n  }\n\n  getTweets();\n}\n\n// LinesFavController.$inject = ['TFL', '$http', '$state'];\n// function LinesFavController(TFL, $http, $state) {\n//   const linesFav = this;\n//   linesFave.tweets = [];\n//\n// }\n","angular\n  .module('twitterForLondon')\n  .service('TFL', TFL);\n\nTFL.$inject = ['$http'];\nfunction TFL($http) {\n  function getStatuses(lines) {\n    return $http\n      .get('/status', { lines: lines })\n      .then((res) => {\n        return res.data;\n      });\n  }\n\n  this.getStatuses = getStatuses;\n}\n","angular.module('twitterForLondon')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('twitterForLondon')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersEditController', UsersEditController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UserLinesController', UserLinesController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User){\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('linesIndex', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n\n}\n\nUserLinesController.$inject = ['User', '$state', 'TFL', '$scope'];\nfunction UserLinesController(User, $state, TFL, $scope) {\n  const userLines = this;\n  userLines.all = [];\n\n  userLines.user = User.get($state.params);\n  userLines.isFav = isFav;\n  userLines.toggle = toggle;\n\n  function isFav(line) {\n    return userLines.user.lineFavs.includes(line.tflId);\n  }\n\n  function toggle(line) {\n    if(isFav(line)) {\n      const idx = userLines.user.lineFavs.findIndex((tflId) => {\n        tflId === line.tflId;\n      });\n      userLines.user.lineFavs.splice(idx, 1);\n    } else {\n      userLines.user.lineFavs.push(line.tflId);\n    }\n  }\n\n  function update() {\n    userLines.user.$update(() => {\n      $state.go('linesIndex', $state.params);\n    });\n  }\n\n  userLines.update = update;\n\n  TFL.getStatuses()\n    .then((lines) => {\n      userLines.all = lines;\n    });\n}\n"]}