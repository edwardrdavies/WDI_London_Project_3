{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/lines.js","js/services/tfl.js","js/models/user.js","js/controllers/users.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","facebook","clientId","twitter","consumer_key","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","ConfirmationController","$http","method","params","confirmationCode","LoginController","login","credentials","authenticate","provider","LinesIndexController","TFL","linesIndex","all","getStatuses","lines","LinesFavIndexController","User","linesFavIndex","lineFavs","get","id","getPayload","_id","LinesShowController","getTweets","q","tflId","res","err","console","log","linesShow","tweets","data","statuses","line","length","join","$resource","update","UsersIndexController","usersIndex","query","UsersShowController","usersShow","isLoggedIn","isAuthenticated","UsersEditController","usersEdit","$update","UserLinesController","$scope","isFav","userLines","includes","toggle","idx","findIndex","splice","push","angular","module","config","$inject","service","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('twitterForLondon', ['ngResource', 'ui.router', 'satellizer', 'ngSanitize'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider,   $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as user'\n  })\n  .state('linesIndex', {\n    url: '/lines',\n    templateUrl: '/templates/linesIndex.html',\n    controller: 'LinesIndexController as linesIndex'\n  })\n  .state('linesFavIndex', {\n    url: '/linesFav',\n    templateUrl: '/templates/linesFavIndex.html',\n    controller: 'LinesFavIndexController as linesFavIndex'\n  })\n  .state('linesShow', {\n    url: '/lines/:tflId',\n    templateUrl: '/templates/linesShow.html',\n    controller: 'LinesShowController as linesShow'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('usersEdit', {\n    url: '/user',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as edit'\n  })\n  .state('userLines', {\n    url: '/user/lines',\n    templateUrl: '/templates/userLines.html',\n    controller: 'UserLinesController as userLines'\n  })\n  .state('confirm', {\n    url: '/confirm/:confirmationCode',\n    templateUrl: '/templates/confirm.html',\n    controller: 'ConfirmController as confirm'\n  });\n\n  $urlRouterProvider.otherwise('/lines');\n}\n\nAuth.$inject = ['$authProvider'];\n\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n\n  $authProvider.facebook({\n    clientId: '360279380977935'\n  });\n\n  $authProvider.twitter({\n    consumer_key: 'rG5fJ6jrp0NECDqpceKMo5UuZ'\n  });\n  //\n  // $authProvider.instagram({\n  //   clientId: 'Instagram Client ID'\n  // });\n\n}\n","angular.module('twitterForLondon')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController)\n  .controller('ConfirmController', ConfirmationController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nConfirmationController.$inject = ['$http', '$state'];\nfunction ConfirmationController($http, $state) {\n  $http({\n    method: 'POST',\n    url: `/confirm/${$state.params.confirmationCode}`\n  }).then(() => {\n    $state.go('login');\n  });\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('linesIndex');\n    });\n  }\n\n  function authenticate (provider) {\n    $auth.authenticate(provider)\n      .then(() => {\n        $state.go('linesIndex');\n      });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular\n  .module('twitterForLondon')\n  .controller('LinesIndexController', LinesIndexController)\n  .controller('LinesFavIndexController', LinesFavIndexController)\n  .controller('LinesShowController', LinesShowController);\n\n\nLinesIndexController.$inject = ['TFL'];\nfunction LinesIndexController(TFL) {\n  const linesIndex = this;\n  linesIndex.all = [];\n\n  TFL.getStatuses()\n    .then((lines) => {\n      linesIndex.all = lines;\n    });\n}\n\nLinesFavIndexController.$inject = ['TFL', '$auth', 'User'];\nfunction LinesFavIndexController(TFL, $auth, User) {\n  const linesFavIndex = this;\n  linesFavIndex.lineFavs = [];\n  User.get({id: $auth.getPayload()._id}, (user) => {\n    linesFavIndex.user = user;\n\n    TFL.getStatuses(user.lineFavs)\n      .then((lines) => {\n        linesFavIndex.lineFavs = lines;\n      });\n  });\n\n}\n\nLinesShowController.$inject = ['TFL', '$http', '$state'];\nfunction LinesShowController(TFL, $http, $state) {\n  const linesShow = this;\n  linesShow.tweets = [];\n\n  TFL.getStatuses([$state.params.tflId])\n    .then((lines) => {\n      linesShow.line = lines[0];\n    });\n\n  function getTweets() {\n    $http({\n      method: 'GET',\n      url: '/tweets',\n      params: { q: $state.params.tflId }\n    }).then((res, err) => {\n      if(err) {\n        console.log('Something went wrong, run away from ', err );\n        return;\n      }\n      linesShow.tweets = res.data.statuses;\n      console.log(linesShow.tweets);\n    });\n  }\n\n  getTweets();\n}\n\n// LinesFavController.$inject = ['TFL', '$http', '$state'];\n// function LinesFavController(TFL, $http, $state) {\n//   const linesFav = this;\n//   linesFave.tweets = [];\n//\n// }\n","angular\n  .module('twitterForLondon')\n  .service('TFL', TFL);\n\nTFL.$inject = ['$http'];\nfunction TFL($http) {\n  function getStatuses(lines) {\n    const params = {};\n    if(lines && lines.length > 0) {\n      params.lines = lines.join(',');\n    }\n\n    return $http\n      .get('/status', { params })\n      .then((res) => {\n        return res.data;\n      });\n  }\n\n  this.getStatuses = getStatuses;\n}\n","angular.module('twitterForLondon')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('twitterForLondon')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersEditController', UsersEditController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UserLinesController', UserLinesController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User){\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n}\n\nUsersEditController.$inject = ['User', '$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get({ id: $auth.getPayload()._id });\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('linesIndex', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n\n}\n\nUserLinesController.$inject = ['User', '$state', 'TFL', '$scope', '$auth'];\nfunction UserLinesController(User, $state, TFL, $scope, $auth) {\n  const userLines = this;\n  userLines.all = [];\n\n  userLines.user = User.get({ id: $auth.getPayload()._id });\n  userLines.isFav = isFav;\n  userLines.toggle = toggle;\n\n\n  function isFav(line) {\n    return userLines.user.lineFavs.includes(line.tflId);\n  }\n\n  function toggle(line) {\n    if(isFav(line)) {\n      const idx = userLines.user.lineFavs.findIndex((tflId) => {\n        tflId === line.tflId;\n      });\n      userLines.user.lineFavs.splice(idx, 1);\n    } else {\n      userLines.user.lineFavs.push(line.tflId);\n    }\n  }\n\n  function update() {\n    userLines.user.$update(() => {\n      $state.go('linesIndex', $state.params);\n    });\n  }\n\n  userLines.update = update;\n\n  TFL.getStatuses()\n    .then((lines) => {\n      userLines.all = lines;\n    });\n}\n"]}